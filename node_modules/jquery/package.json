{
  "name": "jquery",
  "title": "jQuery",
  "description": "JavaScript library for DOM operations",
  "version": "3.0.0-pre",
  "main": "dist/jquery.js",
  "homepage": "http://jquery.com",
  "author": {
    "name": "jQuery Foundation and other contributors",
    "url": "https://github.com/jquery/jquery/blob/master/AUTHORS.txt"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jquery/jquery.git"
  },
  "keywords": [
    "jquery",
    "javascript",
    "browser",
    "library"
  ],
  "bugs": {
    "url": "https://github.com/jquery/jquery/issues"
  },
  "license": "MIT",
  "dependencies": {},
  "devDependencies": {
    "commitplease": "2.0.0",
    "core-js": "0.9.17",
    "grunt": "0.4.5",
    "grunt-babel": "5.0.1",
    "grunt-cli": "0.1.13",
    "grunt-compare-size": "0.4.0",
    "grunt-contrib-jshint": "0.11.2",
    "grunt-contrib-uglify": "0.7.0",
    "grunt-contrib-watch": "0.6.1",
    "grunt-git-authors": "2.0.1",
    "grunt-jscs-checker": "0.8.1",
    "grunt-jsonlint": "1.0.4",
    "grunt-npmcopy": "0.1.0",
    "gzip-js": "0.3.2",
    "load-grunt-tasks": "1.0.0",
    "native-promise-only": "0.7.8-a",
    "promises-aplus-tests": "2.1.0",
    "q": "1.1.2",
    "qunitjs": "1.17.1",
    "requirejs": "2.1.17",
    "sinon": "1.10.3",
    "sizzle": "2.2.0",
    "testswarm": "1.1.0",
    "win-spawn": "2.0.0"
  },
  "jsdomVersions": {
    "node": "3.1.2",
    "iojs": "5.3.0"
  },
  "scripts": {
    "build": "npm install && grunt",
    "start": "grunt watch",
    "test": "grunt && grunt test"
  },
  "commitplease": {
    "components": [
      "Docs",
      "Tests",
      "Build",
      "Release",
      "Core",
      "Ajax",
      "Attributes",
      "Callbacks",
      "CSS",
      "Data",
      "Deferred",
      "Dimensions",
      "Effects",
      "Event",
      "Manipulation",
      "Offset",
      "Queue",
      "Selector",
      "Serialize",
      "Traversing",
      "Wrap"
    ]
  },
  "readme": "[jQuery](http://jquery.com/) â€” New Wave JavaScript\r\n==================================================\r\n\r\nContribution Guides\r\n--------------------------------------\r\n\r\nIn the spirit of open source software development, jQuery always encourages community code contribution. To help you get started and before you jump into writing code, be sure to read these important contribution guidelines thoroughly:\r\n\r\n1. [Getting Involved](http://contribute.jquery.org/)\r\n2. [Core Style Guide](http://contribute.jquery.org/style-guide/js/)\r\n3. [Writing Code for jQuery Foundation Projects](http://contribute.jquery.org/code/)\r\n\r\n\r\nEnvironments in which to use jQuery\r\n--------------------------------------\r\n\r\n- [Browser support](http://jquery.com/browser-support/) differs between the master branch and the compat branch. Specifically, the master branch does not support legacy browsers such as IE8. The jQuery team continues to provide support for legacy browsers on the compat branch. Use the latest compat release if support for those browsers is required. See [browser support](http://jquery.com/browser-support/) for more info.\r\n- To use jQuery in Node, browser extensions, and other non-browser environments, use only master branch releases given the name \"jquery\" rather than \"jquery-compat\". The compat branch does not support these environments.\r\n\r\n\r\nWhat you need to build your own jQuery\r\n--------------------------------------\r\n\r\nIn order to build jQuery, you need to have the latest Node.js/npm and git 1.7 or later. Earlier versions might work, but are not supported.\r\n\r\nFor Windows, you have to download and install [git](http://git-scm.com/downloads) and [Node.js](http://nodejs.org/download/).\r\n\r\nOS X users should install [Homebrew](http://brew.sh/). Once Homebrew is installed, run `brew install git` to install git,\r\nand `brew install node` to install Node.js.\r\n\r\nLinux/BSD users should use their appropriate package managers to install git and Node.js, or build from source\r\nif you swing that way. Easy-peasy.\r\n\r\n\r\nHow to build your own jQuery\r\n----------------------------\r\n\r\nClone a copy of the main jQuery git repo by running:\r\n\r\n```bash\r\ngit clone git://github.com/jquery/jquery.git\r\n```\r\n\r\nEnter the jquery directory and run the build script:\r\n```bash\r\ncd jquery && npm run build\r\n```\r\nThe built version of jQuery will be put in the `dist/` subdirectory, along with the minified copy and associated map file.\r\n\r\nIf you want to create custom build or help with jQuery development, it would be better to install [grunt command line interface](https://github.com/gruntjs/grunt-cli) as a global package:\r\n\r\n```\r\nnpm install -g grunt-cli\r\n```\r\nMake sure you have `grunt` installed by testing:\r\n```\r\ngrunt -V\r\n```\r\n\r\nNow by running the `grunt` command, in the jquery directory, you can build a full version of jQuery, just like with an `npm run build` command:\r\n```\r\ngrunt\r\n```\r\n\r\nThere are many other tasks available for jQuery Core:\r\n```\r\ngrunt -help\r\n```\r\n\r\n### Modules\r\n\r\nSpecial builds can be created that exclude subsets of jQuery functionality.\r\nThis allows for smaller custom builds when the builder is certain that those parts of jQuery are not being used.\r\nFor example, an app that only used JSONP for `$.ajax()` and did not need to calculate offsets or positions of elements could exclude the offset and ajax/xhr modules.\r\n\r\nAny module may be excluded except for `core`, and `selector`. To exclude a module, pass its path relative to the `src` folder (without the `.js` extension).\r\n\r\nSome example modules that can be excluded are:\r\n\r\n- **ajax**: All AJAX functionality: `$.ajax()`, `$.get()`, `$.post()`, `$.ajaxSetup()`, `.load()`, transports, and ajax event shorthands such as `.ajaxStart()`.\r\n- **ajax/xhr**: The XMLHTTPRequest AJAX transport only.\r\n- **ajax/script**: The `<script>` AJAX transport only; used to retrieve scripts.\r\n- **ajax/jsonp**: The JSONP AJAX transport only; depends on the ajax/script transport.\r\n- **css**: The `.css()` method plus non-animated `.show()`, `.hide()` and `.toggle()`. Also removes **all** modules depending on css (including **effects**, **dimensions**, and **offset**).\r\n- **deprecated**: Methods documented as deprecated but not yet removed.\r\n- **dimensions**: The `.width()` and `.height()` methods, including `inner-` and `outer-` variations.\r\n- **effects**: The `.animate()` method and its shorthands such as `.slideUp()` or `.hide(\"slow\")`.\r\n- **event**: The `.on()` and `.off()` methods and all event functionality. Also removes `event/alias`.\r\n- **event/alias**: All event attaching/triggering shorthands like `.click()` or `.mouseover()`.\r\n- **offset**: The `.offset()`, `.position()`, `.offsetParent()`, `.scrollLeft()`, and `.scrollTop()` methods.\r\n- **wrap**: The `.wrap()`, `.wrapAll()`, `.wrapInner()`, and `.unwrap()` methods.\r\n- **core/ready**: Exclude the ready module if you place your scripts at the end of the body. Any ready callbacks bound with `jQuery()` will simply be called immediately. However, `jQuery(document).ready()` will not be a function and `.on(\"ready\", ...)` or similar will not be triggered.\r\n- **deferred**: Exclude jQuery.Deferred. This also removes jQuery.Callbacks. *Note* that modules that depend on jQuery.Deferred(AJAX, effects, core/ready) will not be removed and will still expect jQuery.Deferred to be there. Include your own jQuery.Deferred implementation or exclude those modules as well (`grunt custom:-deferred,-ajax,-effects,-core/ready`).\r\n- **exports/global**: Exclude the attachment of global jQuery variables ($ and jQuery) to the window.\r\n- **exports/amd**: Exclude the AMD definition.\r\n\r\nAs a special case, you may also replace Sizzle by using a special flag `grunt custom:-sizzle`.\r\n\r\n- **sizzle**: The Sizzle selector engine. When this module is excluded, it is replaced by a rudimentary selector engine based on the browser's `querySelectorAll` method that does not support jQuery selector extensions or enhanced semantics. See the [selector-native.js](https://github.com/jquery/jquery/blob/master/src/selector-native.js) file for details.\r\n\r\n*Note*: Excluding Sizzle will also exclude all jQuery selector extensions (such as `effects/animatedSelector` and `css/hiddenVisibleSelectors`).\r\n\r\n*Note*: Removing Sizzle is not supported on the `compat` branch.\r\n\r\nThe build process shows a message for each dependent module it excludes or includes.\r\n\r\n##### AMD name\r\n\r\nAs an option, you can set the module name for jQuery's AMD definition. By default, it is set to \"jquery\", which plays nicely with plugins and third-party libraries, but there may be cases where you'd like to change this. Simply set the `\"amd\"` option:\r\n\r\n```bash\r\ngrunt custom --amd=\"custom-name\"\r\n```\r\n\r\nOr, to define anonymously, set the name to an empty string.\r\n\r\n```bash\r\ngrunt custom --amd=\"\"\r\n```\r\n\r\n#### Custom Build Examples\r\n\r\nTo create a custom build, first check out the version:\r\n\r\n```bash\r\ngit pull; git checkout VERSION\r\n```\r\n\r\nWhere VERSION is the version you want to customize. Then, make sure all Node dependencies are installed:\r\n\r\n```bash\r\nnpm install\r\n```\r\n\r\nCreate the custom build using the `grunt custom` option, listing the modules to be excluded.\r\n\r\nExclude all **ajax** functionality:\r\n\r\n```bash\r\ngrunt custom:-ajax\r\n```\r\n\r\nExcluding **css** removes modules depending on CSS: **effects**, **offset**, **dimensions**.\r\n\r\n```bash\r\ngrunt custom:-css\r\n```\r\n\r\nExclude a bunch of modules:\r\n\r\n```bash\r\ngrunt custom:-ajax,-css,-deprecated,-dimensions,-effects,-event/alias,-offset,-wrap\r\n```\r\n\r\nFor questions or requests regarding custom builds, please start a thread on the [Developing jQuery Core](https://forum.jquery.com/developing-jquery-core) section of the forum. Due to the combinatorics and custom nature of these builds, they are not regularly tested in jQuery's unit test process. The non-Sizzle selector engine currently does not pass unit tests because it is missing too much essential functionality.\r\n\r\nRunning the Unit Tests\r\n--------------------------------------\r\n\r\nMake sure you have the necessary dependencies:\r\n\r\n```bash\r\nnpm install\r\n```\r\n\r\nStart `grunt watch` or `npm start` to auto-build jQuery as you work:\r\n\r\n```bash\r\ngrunt watch\r\n```\r\n\r\n\r\nRun the unit tests with a local server that supports PHP. Ensure that you run the site from the root directory, not the \"test\" directory. No database is required. Pre-configured php local servers are available for Windows and Mac. Here are some options:\r\n\r\n- Windows: [WAMP download](http://www.wampserver.com/en/)\r\n- Mac: [MAMP download](http://www.mamp.info/en/index.html)\r\n- Linux: [Setting up LAMP](https://www.linux.com/learn/tutorials/288158-easy-lamp-server-installation)\r\n- [Mongoose (most platforms)](http://code.google.com/p/mongoose/)\r\n\r\n\r\n\r\n\r\nBuilding to a different directory\r\n---------------------------------\r\n\r\nTo copy the built jQuery files from `/dist` to another directory:\r\n\r\n```bash\r\ngrunt && grunt dist:/path/to/special/location/\r\n```\r\nWith this example, the output files would be:\r\n\r\n```bash\r\n/path/to/special/location/jquery.js\r\n/path/to/special/location/jquery.min.js\r\n```\r\n\r\nTo add a permanent copy destination, create a file in `dist/` called \".destination.json\". Inside the file, paste and customize the following:\r\n\r\n```json\r\n\r\n{\r\n  \"/Absolute/path/to/other/destination\": true\r\n}\r\n```\r\n\r\nAdditionally, both methods can be combined.\r\n\r\n\r\n\r\nEssential Git\r\n-------------\r\n\r\nAs the source code is handled by the Git version control system, it's useful to know some features used.\r\n\r\n### Cleaning ###\r\n\r\nIf you want to purge your working directory back to the status of upstream, the following commands can be used (remember everything you've worked on is gone after these):\r\n\r\n```bash\r\ngit reset --hard upstream/master\r\ngit clean -fdx\r\n```\r\n\r\n### Rebasing ###\r\n\r\nFor feature/topic branches, you should always use the `--rebase` flag to `git pull`, or if you are usually handling many temporary \"to be in a github pull request\" branches, run the following to automate this:\r\n\r\n```bash\r\ngit config branch.autosetuprebase local\r\n```\r\n(see `man git-config` for more information)\r\n\r\n### Handling merge conflicts ###\r\n\r\nIf you're getting merge conflicts when merging, instead of editing the conflicted files manually, you can use the feature\r\n`git mergetool`. Even though the default tool `xxdiff` looks awful/old, it's rather useful.\r\n\r\nThe following are some commands that can be used there:\r\n\r\n* `Ctrl + Alt + M` - automerge as much as possible\r\n* `b` - jump to next merge conflict\r\n* `s` - change the order of the conflicted lines\r\n* `u` - undo a merge\r\n* `left mouse button` - mark a block to be the winner\r\n* `middle mouse button` - mark a line to be the winner\r\n* `Ctrl + S` - save\r\n* `Ctrl + Q` - quit\r\n\r\n[QUnit](http://api.qunitjs.com) Reference\r\n-----------------\r\n\r\n### Test methods ###\r\n\r\n```js\r\nexpect( numAssertions );\r\nstop();\r\nstart();\r\n```\r\n\r\n\r\n*Note*: QUnit's eventual addition of an argument to stop/start is ignored in this test suite so that start and stop can be passed as callbacks without worrying about their parameters.\r\n\r\n### Test assertions ###\r\n\r\n\r\n```js\r\nok( value, [message] );\r\nequal( actual, expected, [message] );\r\nnotEqual( actual, expected, [message] );\r\ndeepEqual( actual, expected, [message] );\r\nnotDeepEqual( actual, expected, [message] );\r\nstrictEqual( actual, expected, [message] );\r\nnotStrictEqual( actual, expected, [message] );\r\nthrows( block, [expected], [message] );\r\n```\r\n\r\n\r\nTest Suite Convenience Methods Reference (See [test/data/testinit.js](https://github.com/jquery/jquery/blob/master/test/data/testinit.js))\r\n------------------------------\r\n\r\n### Returns an array of elements with the given IDs ###\r\n\r\n```js\r\nq( ... );\r\n```\r\n\r\nExample:\r\n\r\n```js\r\nq(\"main\", \"foo\", \"bar\");\r\n\r\n=> [ div#main, span#foo, input#bar ]\r\n```\r\n\r\n### Asserts that a selection matches the given IDs ###\r\n\r\n```js\r\nt( testName, selector, [ \"array\", \"of\", \"ids\" ] );\r\n```\r\n\r\nExample:\r\n\r\n```js\r\nt(\"Check for something\", \"//[a]\", [\"foo\", \"baar\"]);\r\n```\r\n\r\n\r\n\r\n### Fires a native DOM event without going through jQuery ###\r\n\r\n```js\r\nfireNative( node, eventType )\r\n```\r\n\r\nExample:\r\n\r\n```js\r\nfireNative( jQuery(\"#elem\")[0], \"click\" );\r\n```\r\n\r\n### Add random number to url to stop caching ###\r\n\r\n```js\r\nurl( \"some/url.php\" );\r\n```\r\n\r\nExample:\r\n\r\n```js\r\nurl(\"data/test.html\");\r\n\r\n=> \"data/test.html?10538358428943\"\r\n\r\n\r\nurl(\"data/test.php?foo=bar\");\r\n\r\n=> \"data/test.php?foo=bar&10538358345554\"\r\n```\r\n\r\n\r\n### Load tests in an iframe ###\r\n\r\nLoads a given page constructing a url with fileName: `\"./data/\" + fileName + \".html\"`\r\nand fires the given callback on jQuery ready (using the jQuery loading from that page)\r\nand passes the iFrame's jQuery to the callback.\r\n\r\n```js\r\ntestIframe( fileName, testName, callback );\r\n```\r\n\r\nCallback arguments:\r\n\r\n```js\r\ncallback( jQueryFromIFrame, iFrameWindow, iFrameDocument );\r\n```\r\n\r\n### Load tests in an iframe (window.iframeCallback) ###\r\n\r\nLoads a given page constructing a url with fileName: `\"./data/\" + fileName + \".html\"`\r\nThe given callback is fired when window.iframeCallback is called by the page.\r\nThe arguments passed to the callback are the same as the\r\narguments passed to window.iframeCallback, whatever that may be.\r\n\r\n```js\r\ntestIframeWithCallback( testName, fileName, callback );\r\n```\r\n\r\nQuestions?\r\n----------\r\n\r\nIf you have any questions, please feel free to ask on the\r\n[Developing jQuery Core forum](http://forum.jquery.com/developing-jquery-core) or in #jquery on irc.freenode.net.\r\n",
  "readmeFilename": "README.md",
  "gitHead": "5fe76c663f8a4986af62edb434a1708c006d0b21",
  "_id": "jquery@3.0.0-pre",
  "_shasum": "9e80e84bdd9c591111a015a84208de9479674461",
  "_from": "jquery",
  "_resolved": "file:jquery"
}
